# search.py - A tk extension of checker.py, most of the ebay api interaction code is generated by AI
# Built over checker.py by funnystocks (https://github.com/funnystocks)
# No restrictions on usage - this is released into the public domain - 6/2025
# THIS DOES NOT PERSIST EBAY DATA
import tkinter as tk
import pyautogui
import os
import requests
import base64
import json
from dotenv import load_dotenv
import webbrowser
import sys
limit = int(sys.argv[1])
load_dotenv()
width = pyautogui.size().width
height = pyautogui.size().height
root = tk.Tk()
root.geometry(str(width) + "x" + str(height))
root.title("Ebay Search Tool")
root.update_idletasks()
w = root.winfo_width()
h = root.winfo_height()
frame = tk.Frame(root, relief="flat", borderwidth=0, highlightthickness=0)
frame.place(x=w / 8, y=h / 8, width=(w*3/4), height=(h*7/8))
buttons = [tk.Button(frame, relief="flat", borderwidth=0, highlightthickness=0, command=lambda: open_tab(""), text="") for l in range(limit)]
number = [tk.Button(frame, relief="flat", borderwidth=0, highlightthickness=0, command=lambda: open_tab(""), text=str(n+1)) for n in range(limit)]
root.update_idletasks()
f_width = frame.winfo_width()
f_height = frame.winfo_height()
if f_height / limit < 20:
    sys.exit()
for b in range(len(buttons)):
    buttons[b].place(x=f_width / 6, y=(b*f_height/limit), width=(f_width*5/6), height=f_height / limit)
    number[b].place(x=0, y=(b*f_height/limit), width=f_width / 6, height=f_height / limit)
def open_tab(url):
    webbrowser.open_new_tab(url)
def grab_token():
    username = os.getenv("EBAY_APP_ID")
    password = os.getenv("EBAY_CERT_ID")
    token_headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": f"Basic {base64.b64encode(str(username + ":" + password).encode('utf-8')).decode('utf-8')}"
    }
    token_payload = {
        "grant_type": "client_credentials",
        "scope": "https://api.ebay.com/oauth/api_scope"
    }
    response = requests.post("https://api.ebay.com/identity/v1/oauth2/token", headers=token_headers, data=token_payload)
    token_data = response.json()
    access_token = token_data.get('access_token')
    return access_token
token = grab_token()
def search(query):
    search_query.set("")
    headers = {
        "Authorization": f"Bearer {token}",
        "X-EBAY-C-MARKETPLACE-ID": "EBAY_US",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    params = {
        "q": query,
        "limit": limit
    }
    response = requests.get("https://api.ebay.com/buy/browse/v1/item_summary/search", headers=headers, params=params)
    results = response.json()["itemSummaries"]
    for i in range(len(results)):
        buttons[i].config(text=results[i]['title'] + ", $" + results[i]['price']['value'] + ", " + results[i]['condition'])
        buttons[i].config(command=lambda web_url=results[i]['itemWebUrl']: open_tab(web_url))
        number[i].config(command=lambda web_url=results[i]['itemWebUrl']: open_tab(web_url))
def press(event):
    if event.keysym == 'Return':
        search(search_query.get())
search_query = tk.StringVar(value="")
q = tk.Entry(root, textvariable=search_query, relief="flat", borderwidth=0, highlightthickness=0)
q.place(x=w / 4, y=0, width=(w*7/16), height=h / 8)
send = tk.Button(root, text="Search", relief="flat", borderwidth=0, highlightthickness=0, command=lambda: search(search_query.get()))
send.place(x=(w*11/16), y=0, width=w / 16, height=h / 8)
root.bind("<Key>", press)
root.mainloop()